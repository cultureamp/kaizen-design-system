import{j as e}from"./jsx-runtime-Cw0GR0a5.js";import{useMDXComponents as c}from"./index-DSkyVWTJ.js";import{ae as a,ag as n,aj as l}from"./index-UYGUCD_e.js";import{S as s,R as d,K as h}from"./DoesAndDonts-BKQOirz7.js";import"./LinkTo-CCLy3Ahi.js";import"./index-CTjT7uj6.js";import{ButtonClassModifierWithRenderProps as m}from"./Button.docs.stories-BdutdZwn.js";import{Playground as i,ButtonWithIcon as p,IconButton as u,OnReversed as x}from"./Button.stories-B5SxcPsP.js";import"./iframe-KYiyEPLH.js";import"../sb-preview/runtime.js";import"./index-9r8iugjR.js";import"./index-D-8MO0q_.js";import"./_getPrototype-pu5AwQxR.js";import"./index-DrFu-skq.js";import"./index-CCQ3W5xA.js";import"./InlineNotification-DPK6p_Of.js";import"./tslib.es6-CY32MZYl.js";import"./GenericNotification-BhHHhCD8.js";import"./Heading-hQmlkvcj.js";import"./Text-DAOK2_W2.js";import"./chunk-454WOBUV-CM0pFb8Z.js";import"./v4-CQkTLCs1.js";import"./ChevronDownIcon-prLLyjG_.js";import"./SVG-7WFwBCn9.js";import"./ChevronUpIcon-D9pr3Qd6.js";import"./Button-AbBbn7Lr.js";import"./utils-e-dMXvly.js";import"./focusSafely-ByiDPXQJ.js";import"./SSRProvider-C8o06Znb.js";import"./useFocusable-CuIK6Qs-.js";import"./usePress-nudZ2Xgz.js";import"./useButton-CDp2hby9.js";import"./useFocusWithin-C7oArVkD.js";import"./useHover-Bq751pFs.js";import"./mergeClassNames-DEvgSslo.js";import"./AddIcon-C6V_KfCs.js";import"./TrashIcon-4srkHYK2.js";import"./VisuallyHidden-CDYjeGzr.js";function r(o){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...c(),...o.components};return e.jsxs(e.Fragment,{children:[e.jsx(a,{title:"Actions/Button/v3/API Specification"}),`
`,e.jsxs(s,{children:[e.jsx(t.h1,{id:"button-api-specification-v3",children:"Button API Specification (v3)"}),e.jsx(t.p,{children:"Updated July 15, 2024"})]}),`
`,e.jsx(d,{sourceCode:"https://github.com/cultureamp/kaizen-design-system/tree/main/packages/components/src/__actions__/Button/v3",figma:"https://www.figma.com/design/eZKEE5kXbEMY3lx84oz8iN/%F0%9F%92%9C-Heart-UI-Kit?m=auto&t=a6VcoKBJx6snn0ut-1",ariaComponentPage:"https://react-spectrum.adobe.com/react-aria/Button.html",designGuidelines:"/?path=/docs/actions-button-v3-usage-guidelines--docs"}),`
`,e.jsx(s,{className:"mb-24",children:e.jsxs("div",{className:"bg-yellow-100 border-default border-yellow-400 rounded px-24",children:[e.jsx(t.h3,{id:"disclaimer",children:"Disclaimer"}),e.jsxs(t.p,{children:["The ",e.jsx(t.code,{children:"v3"})," of ",e.jsx(t.code,{children:"Button"})," is a partial rebuild to support ",e.jsx(t.a,{href:"/docs/actions-menu-v3-api-specification--docs",children:"Menu v3"}),". As the changes to the API between ",e.jsx(t.code,{children:"v1/v2"})," to ",e.jsx(t.code,{children:"v3"})," is significant, our recommendation is to hold on adopting this outside of ",e.jsx(t.code,{children:"Menu"})," ",e.jsx(t.code,{children:"v3"})," as it will have a limited set of options."]})]})}),`
`,e.jsxs(s,{children:[e.jsx(h,{exportNames:["Tooltip","TooltipTrigger"],family:"actions",version:"3"}),e.jsx(t.h2,{id:"overview",children:"Overview"})]}),`
`,e.jsx(n,{of:i}),`
`,e.jsxs(s,{className:"mb-64",children:[e.jsx(t.h3,{id:"react-aria",children:"React Aria"}),e.jsxs(t.p,{children:["This component is built using the react-aria-components library and extends the ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html",rel:"nofollow",children:"Button"})," component."]}),e.jsxs(t.p,{children:["As this shares the same core ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#anatomy",rel:"nofollow",children:"anatomy"}),", ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#anatomy",rel:"nofollow",children:"props types"})," and ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#events",rel:"nofollow",children:"event handlers"}),", the guidance below is tailored to our implementation and should cover most known use cases of the Button."]}),e.jsxs(t.p,{children:["For more scenarios that may not be present below, we recommend checkout out React Aria's documentation on the ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#hooks",rel:"nofollow",children:"Button's available hooks"})," or ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#advanced-customization",rel:"nofollow",children:"advanced customization"})," options."]})]}),`
`,e.jsx(s,{children:e.jsx(t.h2,{id:"api",children:"API"})}),`
`,e.jsx(l,{of:i,className:"mb-64"}),`
`,e.jsxs(s,{className:"mb-64",children:[e.jsx(t.h3,{id:"onpress-vs-onclick",children:"onPress vs onClick"}),e.jsxs(t.p,{children:["One key change to the ",e.jsx(t.code,{children:"Button"}),"'s API is the shift from ",e.jsx(t.code,{children:"onClick"})," to ",e.jsx(t.code,{children:"onPress"}),". This will not require a change to the implementation of ",e.jsx(t.code,{children:"onClick"})," logic, ie:"]}),e.jsx(t.pre,{children:e.jsx(t.code,{children:`<Button label="Submit" onClick={(e) => sumbit(e)}/>
// can safely be migrated to:
<Button onPress={(e) => submit(e)}>
  Submit
</Button>
`})}),e.jsxs(t.p,{children:["React Aria's implementation of ",e.jsx(t.code,{children:"onPress"})," provides better support for consistent touch events across device types, such mobile, desktop and tablet. You can read more about the development and reason behind this pattern ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/blog/building-a-button-part-1.html#touch-interactions",rel:"nofollow",children:"here"}),"."]})]}),`
`,e.jsxs(s,{children:[e.jsx(t.h3,{id:"interactive-states-and-styling-pseudo-classes",children:"Interactive states and styling pseudo-classes"}),e.jsxs(t.p,{children:["Psuedo classes, such as ",e.jsx(t.code,{children:"hover"}),", ",e.jsx(t.code,{children:"focus"})," or ",e.jsx(t.code,{children:"focus-visible"}),", are now targeted and styled with HTML data attributes that reflect the internal state of the React Aria Button (ie: ",e.jsx(t.code,{children:"isHovered"}),", ",e.jsx(t.code,{children:"isFocusVisible"}),")."]}),e.jsxs(t.p,{children:["When styling in CSS, it is recommended to use ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#styling",rel:"nofollow",children:"data attributes"}),", such as ",e.jsx(t.code,{children:":[data-hovered]"})," or ",e.jsx(t.code,{children:":[data-focus-visible]"}),", instead of using pseudo selectors like ",e.jsx(t.code,{children:":hover"})," or ",e.jsx(t.code,{children:":focus-visible"}),"."]}),e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-css",children:`.button {
  background-color: $color-white;
  &:hover {
    background-color: $color-gray-200;
  }
}
// becomes
.button {
  background-color: $color-white;
  &:[data-hovered] {
    background-color: $color-gray-200;
  }
}
`})}),e.jsx(t.h4,{id:"dynamic-styles-with-buttonrenderprops",children:"Dynamic styles with ButtonRenderProps"}),e.jsxs(t.p,{children:["As ",e.jsx(t.code,{children:"Button"})," extends React Aria's functionality, ",e.jsx(t.code,{children:"className"})," can now accept either a ",e.jsx(t.code,{children:"string"})," or function that receives the ",e.jsx(t.code,{children:"Button"}),"'s state for styling, such as ",e.jsx(t.code,{children:"isPressed"})," or ",e.jsx(t.code,{children:"isHovered"}),". This useful for add dynamic styling tweaks with Tailwind or other CSS-in-JS libraries."]})]}),`
`,e.jsx(n,{of:m,sourceState:"shown"}),`
`,e.jsxs(s,{className:"mb-64",children:[e.jsx(t.p,{children:"This can also be styled in directly with Tailwind targeting the data attributes, ie:"}),e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-tsx",children:`  <Button className="[&[data-focused='true']]:bg-blue-300">Label</Button>
`})}),e.jsxs(t.p,{children:["React Aria also offers a ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/styling.html#plugin",rel:"nofollow",children:"Tailwind plugin"})," that exposes the styling states of React Aria Components into Tailwind. This can make classes and allows you to leverage intellisense when working with React Aria components, ie:"]}),e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-tsx",children:`  <Button className="pressed:bg-blue-300">Label</Button>
`})}),e.jsxs(t.p,{children:["For more on styling with React Aria and other ways to extend the ",e.jsx(t.code,{children:"Button"}),"'s styles, we recommend checking out the ",e.jsx(t.a,{href:"https://react-spectrum.adobe.com/react-aria/Button.html#styling",rel:"nofollow",children:"docs here"}),"."]})]}),`
`,e.jsxs(s,{children:[e.jsx(t.h3,{id:"icons-labels-and-content-as-children",children:"Icons, labels and content as children"}),e.jsxs(t.p,{children:["In ",e.jsx(t.code,{children:"v3"}),", labels, icons and their positions are controlled by the consumer as ",e.jsx(t.code,{children:"children"}),". The immediate children of ",e.jsx(t.code,{children:"Button"})," are spaced using ",e.jsx(t.code,{children:"flex-gap"})," to ensure ",e.jsx(t.code,{children:"RTL"})," can be supported out of the box for most cases."]})]}),`
`,e.jsx(n,{of:p}),`
`,e.jsxs(s,{children:[e.jsxs(t.p,{children:["While the expected default is that ",e.jsx(t.code,{children:"children"})," will be a ",e.jsx(t.code,{children:"ReactNode"}),", it also accepts a render function that takes ",e.jsx(t.code,{children:"ButtonRenderProps"}),". Similar to the className, this exposes the internal state (",e.jsx(t.code,{children:"isPressed"}),", ",e.jsx(t.code,{children:"isHovered"}),", etc) of the button and can be used for conditional rendering."]}),e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-tsx",children:`<Button>
  {({isPressed}) => (
    <>
      {isPressed && <PressHighlight />}
      Press me
    </>
  )}
</Button>
`})})]}),`
`,e.jsxs(s,{children:[e.jsx(t.h3,{id:"icon-only-buttons",children:"Icon only buttons"}),e.jsxs(t.p,{children:["To achieve the ",e.jsx(t.code,{children:"IconButton"})," pattern in ",e.jsx(t.code,{children:"v3"}),", we recommend passing an icon in as a the sole child. The label should be added to the icon's ",e.jsx(t.code,{children:"aria-label"})," prop in the SVG Icon."]})]}),`
`,e.jsx(n,{of:u,className:"mb-32"}),`
`,e.jsx(s,{className:"mb-64",children:e.jsxs(t.p,{children:["We recommend against setting the ",e.jsx(t.code,{children:"aria-label"})," on the ",e.jsx(t.code,{children:"Button"})," itself, and letting the accessible label be ",e.jsx(t.a,{href:"https://cultureamp.atlassian.net/wiki/spaces/PA/pages/3833331831/Accessible+button+and+link+labels",rel:"nofollow",children:"determined by the children"}),". You can achieve this by using visually hidden elements as children, which will create an accessible label based off the contents of the button."]})}),`
`,e.jsxs(s,{className:"mb-64",children:[e.jsx(t.h3,{id:"reversed-colors",children:"Reversed Colors"}),e.jsxs(t.p,{children:["The ",e.jsx(t.code,{children:"Button"})," uses the ",e.jsx(t.code,{children:"useReversedColors"})," hook and ",e.jsx(t.code,{children:"ReversedColors"})," provider to control the dark and light theme."]}),e.jsx(n,{className:"bg-purple-600 mb-24",of:x}),e.jsx(t.p,{children:"To enable the reversed theme, you will need to the component or application in the ReversedColors provider."})]}),`
`,e.jsxs(s,{children:[e.jsx(t.h3,{id:"buttons-and-links",children:"Buttons and links"}),e.jsxs(t.p,{children:[e.jsx(t.code,{children:"v3"})," of the ",e.jsx(t.code,{children:"Button"})," component does not support the ",e.jsx(t.code,{children:"href"})," prop. While a ",e.jsx(t.code,{children:"Link"})," component will be coming to Kaizen, we recommend using the ",e.jsx(t.code,{children:"v2"})," of button if a ",e.jsx(t.code,{children:"anchor"})," or routing link is needed."]}),e.jsxs(t.p,{children:["We do not advise passing in an ",e.jsx(t.code,{children:"anchor"})," tag as a child of the ",e.jsx(t.code,{children:"Button"})," as this can lead to accessibility issues."]})]})]})}function ee(o={}){const{wrapper:t}={...c(),...o.components};return t?e.jsx(t,{...o,children:e.jsx(r,{...o})}):r(o)}export{ee as default};
