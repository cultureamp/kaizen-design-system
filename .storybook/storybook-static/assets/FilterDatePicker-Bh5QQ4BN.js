import{R as i,r as q}from"./index-CTjT7uj6.js";import{g as V}from"./getLocale-DZ-phe2v.js";import{F as B,a as N}from"./FilterContents-MyXMWDj6.js";import{c as A}from"./index-CCQ3W5xA.js";import{u as H,a as S}from"./useDateInputHandlers-CFHAAAKV.js";import{b as _,D as j,c as J}from"./validateDate-Bbd7IJoY.js";import{a as b}from"./isInvalidDate-CQ4jNt7-.js";import{u as X}from"./useIntl-Ci3jBQGG.js";import{F as E}from"./FieldMessage-D8OmrYjz.js";import{C as $}from"./CalendarSingle-DmO3h1TK.js";const F=(a,e,u)=>a?_(a,e,u):"",U="_disabled_1s38r_1",z={disabled:U},P=i.forwardRef(({id:a,labelText:e,description:u,disabled:d,isReversed:s=!1,validationMessage:t,locale:r,classNameOverride:l,...o},D)=>{const{formatMessage:w}=X(),h=w({id:"filterDatePickerDateInputField.dateInputLabelFallback",defaultMessage:"Date",description:"Default label for date input field"}),f=`${a}--field-message`,p=t?`${a}--date-error-message`:void 0,I=p?`${p} ${f}`:f,m=p!==void 0;return i.createElement("div",null,i.createElement(j,{ref:D,id:a,labelText:e||h,"aria-describedby":I,"aria-errormessage":p,"aria-invalid":m,autoComplete:"off",disabled:d,status:t==null?void 0:t.status,classNameOverride:l,...o}),t&&i.createElement(E,{id:p,message:t==null?void 0:t.message,status:t==null?void 0:t.status,reversed:s}),i.createElement(E,{id:f,message:i.createElement(J,{description:u,locale:r}),reversed:s,classNameOverride:d?z.disabled:void 0}))});P.displayName="DateInputField";P.__docgenInfo={description:"",methods:[],displayName:"DateInputField",props:{isReversed:{defaultValue:{value:"false",computed:!1},required:!1}}};const G=(a,e)=>{switch(e.type){case"update_selected_date":return{...a,selectedDate:e.date,inputValue:e.inputValue===void 0?a.inputValue:e.inputValue,startMonth:e.date&&!b(e.date)?e.date:new Date};case"navigate_months":return{...a,startMonth:e.date&&!b(e.date)?e.date:new Date};case"update_input_field":return{...a,inputValue:e.inputValue}}},K="_filterDatePickerField_yisqg_2",Q={filterDatePickerField:K},x=({id:a,inputProps:e,locale:u,defaultMonth:d,selectedDate:s,onDateChange:t,onDateSubmit:r,disabledDays:l,description:o,validationMessage:D,onValidate:w,classNameOverride:h,...f})=>{const p=q.useId(),I=a??p,m=V(u),k=H({disabledDays:l,validationMessage:D,onValidate:w}),R=(n,c)=>{const{validationResponse:v,newDate:L}=k.validateDate({date:n,inputValue:c});return k.updateValidation(v),L},[g,y]=q.useReducer(G,{selectedDate:s,inputValue:F(s,l,m)||"",startMonth:s&&!b(s)?s:d||new Date}),T=n=>{t(n)},M=S({locale:m,disabledDays:l,setInputValue:n=>{y({type:"update_input_field",inputValue:n})},onDateChange:n=>{const c=R(n,g.inputValue);y({type:"update_selected_date",date:c}),T(c)},onDateSubmit:n=>{b(n)||r==null||r(n)},...e}),C=n=>{const c=F(n,l,m),v=R(n,c);y({type:"update_selected_date",date:v}),y({type:"update_input_field",inputValue:c}),T(v),r==null||r(v)};return q.useEffect(()=>{R(s,g.inputValue)},[]),i.createElement("div",{className:A(Q.filterDatePickerField,h),...f},i.createElement(P,{id:`${I}--input`,locale:m,value:g.inputValue,description:o,validationMessage:k.validationMessage,...M,...e}),i.createElement($,{disabled:l,locale:m,selected:g.selectedDate,onSelect:C,month:g.startMonth,onMonthChange:n=>y({type:"navigate_months",date:n})}))};x.__docgenInfo={description:"",methods:[],displayName:"FilterDatePickerField",props:{id:{required:!1,tsType:{name:"string"},description:""},locale:{required:!0,tsType:{name:"DatePickerSupportedLocales"},description:""},defaultMonth:{required:!1,tsType:{name:'CalendarSingleProps["defaultMonth"]',raw:'CalendarSingleProps["defaultMonth"]'},description:"Sets first displayed month to month of provided date if there isn't a date set."},selectedDate:{required:!0,tsType:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}]},description:"The date range passed in from the consumer that renders in the inputs and calendar."},onDateChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(date: Date | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}]},name:"date"}],return:{name:"void"}}},description:"Callback when date is updated either by the calendar picker or by typing and blurring.\nDate will return as `undefined` if empty, invalid or disabled."},onDateSubmit:{required:!1,tsType:{name:"signature",type:"function",raw:"(date: Date | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}]},name:"date"}],return:{name:"void"}}},description:"Callback when date is saved/committed/submitted valid date by either by the calendar picker or by typing and blurring.\nDate will return as `undefined` if empty, invalid or disabled.\n\nDistinctly different from `change` where that is triggered on any kind of event, we expect the final valid date in this function."},disabledDays:{required:!1,tsType:{name:"DisabledDays"},description:"See https://react-day-picker.js.org/api/types/Matcher"},inputProps:{required:!1,tsType:{name:"intersection",raw:`Omit<Partial<InputProps>, "value"> &
DataAttributes`,elements:[{name:"Omit",elements:[{name:"Partial",elements:[{name:"intersection",raw:`{
  id: string
  locale: Locale
  /**
   * A description that provides context for the text field
   */
  description?: DateInputDescriptionProps["description"]
  isReversed?: boolean
  validationMessage?: ValidationMessage
  disabled?: boolean
  labelText?: DateInputProps["labelText"]
} & Omit<DateInputProps, "id" | "labelText">`,elements:[{name:"signature",type:"object",raw:`{
  id: string
  locale: Locale
  /**
   * A description that provides context for the text field
   */
  description?: DateInputDescriptionProps["description"]
  isReversed?: boolean
  validationMessage?: ValidationMessage
  disabled?: boolean
  labelText?: DateInputProps["labelText"]
}`,signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"locale",value:{name:"Locale",required:!0}},{key:"description",value:{name:'DateInputDescriptionProps["description"]',raw:'DateInputDescriptionProps["description"]',required:!1},description:"A description that provides context for the text field"},{key:"isReversed",value:{name:"boolean",required:!1}},{key:"validationMessage",value:{name:"signature",type:"object",raw:`{
  status: FieldMessageStatus
  message: string | React.ReactElement
}`,signature:{properties:[{key:"status",value:{name:"FieldMessageStatus",required:!0}},{key:"message",value:{name:"union",raw:"string | React.ReactElement",elements:[{name:"string"},{name:"ReactReactElement",raw:"React.ReactElement"}],required:!0}}]},required:!1}},{key:"disabled",value:{name:"boolean",required:!1}},{key:"labelText",value:{name:'DateInputProps["labelText"]',raw:'DateInputProps["labelText"]',required:!1}}]}},{name:"Omit",elements:[{name:"DateInputProps"},{name:"union",raw:'"id" | "labelText"',elements:[{name:"literal",value:'"id"'},{name:"literal",value:'"labelText"'}]}],raw:'Omit<DateInputProps, "id" | "labelText">'}]}],raw:"Partial<InputProps>"},{name:"literal",value:'"value"'}],raw:'Omit<Partial<InputProps>, "value">'},{name:"DataAttributes"}]},description:""},description:{required:!1,tsType:{name:'DateInputDescriptionProps["description"]',raw:'DateInputDescriptionProps["description"]'},description:"Custom description to provide extra context (input format help text remains)."},validationMessage:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  status: FieldMessageStatus
  message: string | React.ReactElement
}`,signature:{properties:[{key:"status",value:{name:"FieldMessageStatus",required:!0}},{key:"message",value:{name:"union",raw:"string | React.ReactElement",elements:[{name:"string"},{name:"ReactReactElement",raw:"React.ReactElement"}],required:!0}}]}},description:""},onValidate:{required:!1,tsType:{name:"signature",type:"function",raw:"(validationResponse: DateValidationResponse) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  date: Date | undefined
  inputValue: string | undefined // Input value upon validation
  validationMessage: ValidationMessage | undefined
  isDisabled: boolean
  isInvalid: boolean
  isEmpty: boolean
  isValidDate: boolean // A date is !isDisabled && !isInvalid && !isEmpty
}`,signature:{properties:[{key:"date",value:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}],required:!0}},{key:"inputValue",value:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}],required:!0}},{key:"validationMessage",value:{name:"union",raw:"ValidationMessage | undefined",elements:[{name:"signature",type:"object",raw:`{
  status: FieldMessageStatus
  message: string | React.ReactElement
}`,signature:{properties:[{key:"status",value:{name:"FieldMessageStatus",required:!0}},{key:"message",value:{name:"union",raw:"string | React.ReactElement",elements:[{name:"string"},{name:"ReactReactElement",raw:"React.ReactElement"}],required:!0}}]}},{name:"undefined"}],required:!0}},{key:"isDisabled",value:{name:"boolean",required:!0}},{key:"isInvalid",value:{name:"boolean",required:!0}},{key:"isEmpty",value:{name:"boolean",required:!0}},{key:"isValidDate",value:{name:"boolean",required:!0}}]}},name:"validationResponse"}],return:{name:"void"}}},description:"Callback when a date is selected. Utilises internal validation if not set."},setIsFilterOpen:{required:!1,tsType:{name:'FilterProps["setIsOpen"]',raw:'FilterProps["setIsOpen"]'},description:""}}};const O=({isOpen:a,setIsOpen:e,renderTrigger:u,selectedDate:d,label:s,locale:t,onDateSubmit:r,...l})=>i.createElement(B,{isOpen:a,setIsOpen:e,renderTrigger:o=>u({selectedValue:d?_(d,void 0,V(t)):void 0,label:s,...o})},i.createElement(N,null,i.createElement(x,{locale:t,selectedDate:d,onDateSubmit:o=>{e(!1),r==null||r(o)},...l})));O.displayName="FilterDatePicker";O.__docgenInfo={description:"",methods:[],displayName:"FilterDatePicker",props:{id:{required:!1,tsType:{name:"string"},description:""},label:{required:!0,tsType:{name:"string"},description:""},isOpen:{required:!0,tsType:{name:'intersection["isOpen"]',raw:'FilterProps["isOpen"]'},description:""},setIsOpen:{required:!0,tsType:{name:'intersection["setIsOpen"]',raw:'FilterProps["setIsOpen"]'},description:""},renderTrigger:{required:!0,tsType:{name:"signature",type:"function",raw:"(triggerProps: FilterButtonProps) => JSX.Element",signature:{arguments:[{type:{name:"intersection",raw:`{
  label: string
  selectedValue?: string | JSX.Element
  isOpen?: boolean
} & Omit<FilterButtonBaseProps, "children">`,elements:[{name:"signature",type:"object",raw:`{
  label: string
  selectedValue?: string | JSX.Element
  isOpen?: boolean
}`,signature:{properties:[{key:"label",value:{name:"string",required:!0}},{key:"selectedValue",value:{name:"union",raw:"string | JSX.Element",elements:[{name:"string"},{name:"JSX.Element"}],required:!1}},{key:"isOpen",value:{name:"boolean",required:!1}}]}},{name:"Omit",elements:[{name:"intersection",raw:`{
  children: React.ReactNode
} & OverrideClassName<ButtonHTMLAttributes<HTMLButtonElement>>`,elements:[{name:"signature",type:"object",raw:`{
  children: React.ReactNode
}`,signature:{properties:[{key:"children",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!0}}]}},{name:"OverrideClassName",elements:[{name:"ButtonHTMLAttributes",elements:[{name:"HTMLButtonElement"}],raw:"ButtonHTMLAttributes<HTMLButtonElement>"}],raw:"OverrideClassName<ButtonHTMLAttributes<HTMLButtonElement>>"}]},{name:"literal",value:'"children"'}],raw:'Omit<FilterButtonBaseProps, "children">'}]},name:"triggerProps"}],return:{name:"JSX.Element"}}},description:""}}};export{O as F,x as a};
