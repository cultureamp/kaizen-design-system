import fs from 'fs'
import path from 'path'
import { toCustomPropertiesString } from 'object-to-css-variables'
import { format } from 'prettier'
import { defaultTheme, makeCssVariableDefinitionsMap } from '../src'
import { makeCSSVariableTheme } from '../src/lib/makeCssVariableTheme'

const JSON_OUTPUT_DIR = `${process.cwd()}/tokens`
const CSS_OUTPUT_DIR = `${process.cwd()}/css`

const formatJson = (jsonString: string): Promise<string> => format(jsonString, { parser: 'json' })

const run = async (): Promise<void> => {
  fs.mkdirSync(JSON_OUTPUT_DIR, { recursive: true })
  fs.mkdirSync(CSS_OUTPUT_DIR, { recursive: true })

  // Write CSS vars tokens to CSS format
  const cssVars = toCustomPropertiesString(makeCssVariableDefinitionsMap(defaultTheme))

  fs.writeFileSync(
    path.resolve(CSS_OUTPUT_DIR, 'variables.css'),
    `
      /** THIS IS AN AUTOGENERATED FILE **/

      :root{${cssVars}}
    `,
  )

  /**
   * augmentedThemeWithCSSVariableValuesVersion
   * It will look something like:
   * ```
   * {
   *    color: {
   *       wisteria: {
   *         100: "var(--kz-var-color-wisteria-100, #012345)",
   *         100-id: "--kz-var-color-wisteria-100",
   *         100-rgb: "var(--kz-var-color-wisteria-100-rgb, 000, 111, 222)",
   *         100-rgb-id: "--kz-var-color-wisteria-100-rgb",
   *       }
   *    },
   *
   *    "kz-var": {
   *      color: {
   *          wisteria: {
   *            100: "var(--kz-var-color-wisteria-100, #012345)",
   *            100-rgb-params: "var(--kz-var-color-wisteria-100-rgb-params, 000, 111, 222)",
   *          }
   *        }
   *     }
   *     ...
   *     ...
   * }
   * ```
   */
  const augmentedThemeWithCSSVariableValuesVersion = makeCSSVariableTheme(defaultTheme)

  /* Write JSON tokens */
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'color.json'),
    await formatJson(
      JSON.stringify({
        dataViz: augmentedThemeWithCSSVariableValuesVersion.dataViz,
        color: augmentedThemeWithCSSVariableValuesVersion.color,
      }),
    ),
  )
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'border.json'),
    await formatJson(
      JSON.stringify({
        border: augmentedThemeWithCSSVariableValuesVersion.border,
      }),
    ),
  )
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'animation.json'),
    await formatJson(
      JSON.stringify({
        animation: augmentedThemeWithCSSVariableValuesVersion.animation,
      }),
    ),
  )
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'layout.json'),
    await formatJson(
      JSON.stringify({
        layout: defaultTheme.layout,
      }),
    ),
  )
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'shadow.json'),
    await formatJson(
      JSON.stringify({
        shadow: augmentedThemeWithCSSVariableValuesVersion.shadow,
      }),
    ),
  )
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'spacing.json'),
    await formatJson(
      JSON.stringify({
        spacing: augmentedThemeWithCSSVariableValuesVersion.spacing,
      }),
    ),
  )
  fs.writeFileSync(
    path.resolve(JSON_OUTPUT_DIR, 'typography.json'),
    await formatJson(
      JSON.stringify({
        typography: augmentedThemeWithCSSVariableValuesVersion.typography,
      }),
    ),
  )
}

run()
