@import "~@kaizen/design-tokens/sass/shadow";
@import "~@kaizen/design-tokens/sass/color";
@import "~@kaizen/design-tokens/sass/border";
@import "~@kaizen/draft-form/KaizenDraft/Form/Primitives/Input/styles.scss";
@import "~@kaizen/component-library/styles/animation";
@import "~@kaizen/component-library/styles/border";
@import "~@kaizen/deprecated-component-library-helpers/styles/type";

@mixin select-border($color: $color) {
  border-color: $color;
  // box-shadow: 0 0 0 1px $color;
}

$control-height: $ca-grid * 2;

.basePlaceholder {
  @include kz-typography-paragraph-body;
  margin-left: 2px;
  margin-right: 2px;
  top: 50%;
  position: absolute;
  transform: translateY(-50%);
  box-sizing: border-box;

  .controlHasUnconstrainedHeight & {
    position: relative;
    top: 0;
    transform: none;
  }
}
.container {
  position: relative;
  box-sizing: border-box;
}

.disabled {
  opacity: 0.3;
}

.control {
  align-items: center;
  background-color: white;
  cursor: default;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  min-height: $control-height;
  position: relative;
  box-sizing: border-box;
  border: $border-solid-border-width $border-solid-border-style
    var($color-gray-500-id, $color-purple-500);
  border-radius: $border-solid-border-radius;
  /* Tech debt - this !important existed before Stylelint rules */
  outline: 0 !important; /* stylelint-disable-line declaration-no-important */

  &:not(.disabled):hover {
    // Slate on Heart theme, Wisteria700 on Zen. Switching not needed when Zen is removed.
    border-color: var($color-gray-600-id, $color-purple-700);
    // Stone on Heart theme, Wisteria100 on Zen. Switching not needed when Zen is removed
    background-color: var($color-gray-100-id, $color-purple-100);
  }

  &.isFocused {
    @include select-border($color: $color-blue-500);
  }
}

.valueContainer {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  position: relative;
  box-sizing: border-box;
  flex: 1;
  padding: 2px 8px;
  overflow: hidden;

  .disabled & {
    position: static; // TODO calc based on border width
  }

  .controlHasUnconstrainedHeight & {
    min-height: calc(#{$control-height} - (#{$border-solid-border-width} * 2));
  }
}

.singleValue {
  @extend .basePlaceholder;
  max-width: calc(100% - 8px);
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;

  .controlHasUnconstrainedHeight & {
    white-space: normal;
    overflow: visible;
    word-break: break-word;
  }
}

.placeholder {
  @extend .basePlaceholder;
  opacity: $input-placeholder-opacity;
}

.faded {
  color: $color-purple-800;
}

.bold {
  color: $color-purple-800;
  font-weight: $ca-weight-book;
}

.fadedBold {
  color: $color-purple-800;
  font-weight: $ca-weight-book;
}

.indicators {
  align-items: center;
  align-self: stretch;
  display: flex;
  flex-shrink: 0;
  box-sizing: border-box;
}

.indicatorContainer {
  display: flex;
  box-sizing: border-box;
  padding: 8px;
}

.iconButton {
  height: 20px;
  composes: interactiveIconWrapper from "~@kaizen/component-library/components/Icon/Icon.module.scss";
}

.iconButtonDisabled {
  height: 20px;
}

.menu {
  top: 100%;
  background-color: white;
  margin-bottom: 8px;
  position: absolute;
  width: 100%;
  box-sizing: border-box;
  // Temporary 6px until we redesign this component with Inter
  border: 6px $border-solid-border-style transparent;
  border-radius: $border-solid-border-radius;
  box-shadow: $shadow-large-box-shadow;
  z-index: 1;
}

.menuList {
  max-height: 215px;
  overflow-y: auto;
  padding-bottom: 6px;
  padding-top: 4px;
  box-sizing: border-box;
  position: relative;
}

.option {
  @include kz-typography-paragraph-body;
  background-color: transparent;
  color: inherit;
  cursor: default;
  display: block;
  font-size: inherit;
  width: 100%;
  user-select: none;
  box-sizing: border-box;
  border-radius: 4px;
  padding: 8px $ca-grid / 2;
  outline: none;

  &.isTarget:not(.isSelected) {
    color: $color-blue-500;
    background-color: $color-blue-100;
  }

  &:focus:not(.isSelected) {
    background-color: $color-blue-100;
  }

  &.isFocused:not(.isSelected) {
    background-color: $color-blue-100;
  }
}

.isSelected {
  background-color: $color-blue-100;

  &:hover {
    color: $color-blue-500;
  }
}

.multiValue {
  margin: 2px;
  display: inline-block;
}

.cautionary {
  @include select-border($color: $color-yellow-300);

  &:hover {
    box-shadow: none;
  }
}

.error {
  @include select-border($color: $color-red-200);

  &:hover {
    box-shadow: none;
  }
}

.preventPointer {
  pointer-events: none;
}

.clearButtonWrapper {
  color: rgba($color-purple-800-rgb, 70%);
  height: 20px;
  position: relative;
  top: -14px;

  button:not(:disabled):hover {
    // not(:disabled) is required for extra specificity to override the default button background
    background-color: transparent;
  }
}

.autosizeInputContainer {
  @include kz-typography-paragraph-body;
  @include ca-inherit-baseline;
  padding-bottom: 2px;
  padding-top: 2px;
  box-sizing: border-box;
  margin: 2px;

  .controlHasUnconstrainedHeight & {
    position: absolute;
    top: 6px;
  }
}
