@import "~@kaizen/design-tokens/sass/color";
@import "~@kaizen/design-tokens/sass/border";
@import "~@kaizen/design-tokens/sass/shadow";
@import "~@kaizen/design-tokens/sass/spacing";
@import "~@kaizen/component-library/styles/animation";
@import "~@kaizen/component-library/styles/border";
@import "~@kaizen/component-library/styles/color";
@import "~@kaizen/component-library/styles/type";
@import "~@kaizen/component-library/styles/layout";
@import "~@kaizen/component-library/components/Button/styles";

// Taken from design-tokens/sass/shadow
// we need control of the x and y offset in this component
$box-shadow-color-sm: rgba(53, 55, 74, 0.09);
$row-height: 60px;

.anchorReset {
  text-decoration: none;
  color: $kz-color-wisteria-800;
  display: block;
  &:hover,
  &:active,
  &:focus {
    text-decoration: none;
  }
}

.container {
  width: 100%;
  margin-bottom: $ca-grid * 0.5;
}

.headerRowCell {
  @include button-reset;
  text-overflow: ellipsis;
  overflow-x: hidden;
  white-space: nowrap;
  // The 8px usually makes the height of the header cell 40px
  padding: 8px $ca-grid;
  display: flex;
  align-items: center;
  text-align: start;
  justify-content: flex-start;
}

.headerRowCellWrap {
  white-space: normal;
}

.headerRowCellAlignCenter {
  text-align: center;
  justify-content: center;
}

.headerRowCellAlignEnd {
  text-align: end;
  justify-content: flex-end;
}

.headerRowCellCheckbox {
  margin-right: 10px;
}

.headerRowCellCheckboxContainer {
  display: flex;
  align-items: center;
}

.headerRowCellIcon {
  color: $kz-color-wisteria-500;
  height: 20px;

  .active & {
    color: $kz-color-wisteria-800;
  }
}

.active {
  .header & {
    background-color: $kz-color-wisteria-100;
  }
}

.card {
  @include button-reset;
  background: $kz-color-white;
  border: solid 1px rgba($kz-color-wisteria-700, 0.1);
  transition: box-shadow $ca-duration-rapid, border-color $ca-duration-rapid,
    margin $ca-duration-rapid, padding $ca-duration-rapid,
    width $ca-duration-rapid;

  // This is an optical hack to stop the card shadow from overlapping over
  // the proceeding cards
  box-shadow: 0px 4px 6px rgba(53, 55, 74, 0.04);

  // These css properties are required for when the rows are anchor elements
  composes: anchorReset;

  &:not(:first-child) {
    margin-top: -1px;
  }

  &:last-child {
    border-bottom-left-radius: $kz-border-solid-border-radius;
    border-bottom-right-radius: $kz-border-solid-border-radius;
  }

  &:hover {
    will-change: box-shadow, border-color, margin, padding, width;
  }

  &.well {
    margin-top: ($ca-grid * 0.5);
  }
}

// target the first child card when there is a heading present
[role="rowgroup"] + .card {
  border-top-left-radius: $kz-border-solid-border-radius;
  border-top-right-radius: $kz-border-solid-border-radius;
  box-shadow: $kz-shadow-small-box-shadow;
}

.card:first-child {
  border-top-left-radius: $kz-border-solid-border-radius;
  border-top-right-radius: $kz-border-solid-border-radius;
  box-shadow: $kz-shadow-small-box-shadow;
}

.row {
  display: flex;
}

.well {
  border-color: $kz-border-borderless-border-color;
  box-shadow: none;
  border-radius: $kz-border-solid-border-radius;
  background-color: $kz-color-ash;
  margin-bottom: $ca-grid * 0.5;
}

.popout {
  box-shadow: $kz-shadow-large-box-shadow;
}

.expanded {
  position: relative;
  z-index: 1;
  margin-left: -$ca-grid * 0.5;
  margin-right: -$ca-grid * 0.5;
  padding-left: $ca-grid * 0.5;
  padding-right: $ca-grid * 0.5;
}

.hasHoverState {
  width: 100%;
  text-align: left;
  cursor: pointer;

  &.expanded {
    width: calc(100% + #{$ca-grid});
  }

  &:hover {
    background-color: $kz-color-stone;
  }
}

.rowCell {
  min-height: $row-height;
  padding: 0 $kz-spacing-md;
  display: flex;
  align-items: center;
  // These css properties are required for when the cells are anchor elements
  composes: anchorReset;

  .defaultSpacing & {
    padding: $kz-spacing-md * 0.5 $kz-spacing-md;
  }
}
