@import "~@kaizen/design-tokens/sass/shadow";
@import "~@kaizen/design-tokens/sass/border";
@import "~@kaizen/design-tokens/sass/animation";
@import "~@kaizen/design-tokens/sass/spacing";
@import "~@kaizen/design-tokens/sass/color";
@import "~@kaizen/draft-button/KaizenDraft/Button/styles";

// Taken from design-tokens/sass/shadow
// we need control of the x and y offset in this component
$box-shadow-color-sm: rgba(53, 55, 74, 0.09);
$row-height: 60px;
$row-height-data-variant: 48px;

.anchorReset {
  text-decoration: none;
  color: $color-purple-800;
  display: block;
  &:hover,
  &:active,
  &:focus {
    text-decoration: none;
  }

  &.headerRowCellButtonReversed {
    color: $color-white;
  }
}

.container {
  width: 100%;
  margin-bottom: $spacing-sm;
}

.headerRowCell {
  display: flex;
  align-items: stretch;
  text-align: start;
  justify-content: flex-start;
  // This is required as so the tooltip will display directly above the header cell
  position: relative;
}

.headerRowCellNoWrap {
  .headerRowCellLabel {
    // It appears that this ellipsis is not showing ðŸ¤”
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }
}

.headerRowCellAlignCenter {
  .headerRowCellLabelAndIcons {
    text-align: center;
    justify-content: center;
  }
}

.headerRowCellAlignEnd {
  .headerRowCellLabelAndIcons {
    text-align: end;
    justify-content: flex-end;
  }
}

.headerRowCellCheckbox {
  margin-right: 10px;
}

// The .headerRowCell wrapper is required to increase the specificity, as so
// we can override the `Tooltip` component's styling.
.headerRowCell .headerRowCellTooltip {
  flex: 1 1 100%;
  width: 100%;
  display: flex;
  align-items: stretch;
}

.headerRowCellButton {
  @include button-reset;
  composes: anchorReset;
}

.headerRowCellButton,
.headerRowCellNoButton {
  display: flex;
  align-items: stretch;
  width: 100%;
  // The 8px usually makes the height of the header cell 40px
  padding: 8px $spacing-md;
  // Ensures that the 100% doesn't go outside of the `headerRowCell` width
  box-sizing: border-box;
}

.headerRowCellLabelAndIcons {
  display: flex;
  align-items: center;
  flex: 1 1 100%;
  width: 100%;
}

.headerRowCellTooltipIcon {
  color: $color-blue-500;
  margin-right: $spacing-xs;
}

.headerRowCellIcon {
  color: $color-purple-500;
  height: 20px;

  .headerRowCellActive & {
    color: $color-purple-800;
  }
}

.card {
  @include button-reset;
  background: $color-white;
  border: solid 1px rgba($color-purple-700-rgb, 0.1);
  transition: box-shadow $animation-duration-rapid,
    border-color $animation-duration-rapid, margin $animation-duration-rapid,
    padding $animation-duration-rapid, width $animation-duration-rapid;

  // This is an optical hack to stop the card shadow from overlapping over
  // the proceeding cards
  box-shadow: 0px 4px 6px rgba(53, 55, 74, 0.04);

  // These css properties are required for when the rows are anchor elements
  composes: anchorReset;

  &:not(:first-child) {
    margin-top: -1px;
  }

  &:last-child {
    border-bottom-left-radius: $border-solid-border-radius;
    border-bottom-right-radius: $border-solid-border-radius;
  }

  &:hover {
    will-change: box-shadow, border-color, margin, padding, width;
  }

  &.well {
    margin-top: $spacing-sm;
  }
}

// target the first child card when there is a heading present
[role="rowgroup"] + .card {
  border-top-left-radius: $border-solid-border-radius;
  border-top-right-radius: $border-solid-border-radius;
  box-shadow: $shadow-small-box-shadow;
}

.card:first-child {
  border-top-left-radius: $border-solid-border-radius;
  border-top-right-radius: $border-solid-border-radius;
  box-shadow: $shadow-small-box-shadow;
}

.row {
  display: flex;
}

.well {
  border-color: $border-borderless-border-color;
  box-shadow: none;
  border-radius: $border-solid-border-radius;
  background-color: $color-gray-300;
  margin-bottom: $spacing-sm;
}

.popout {
  box-shadow: $shadow-large-box-shadow;
}

.expanded {
  // We want to have NO background on Heart theme (when CSS variables are defined), but keep stone backgrond on Zen. Need to do this using 0 opacity.
  // We also only want this switch for the expanded state. Non-expanded hovering will resort to stone background, as seen in .hasHoverState
  --dt-hover-background-heart: rgba(var(#{$color-white-rgb-id}), 0);

  position: relative;
  z-index: 1;
  margin-left: calc(#{$spacing-sm} * -1);
  margin-right: calc(#{$spacing-sm} * -1);
  padding-left: $spacing-sm;
  padding-right: $spacing-sm;
}

.hasHoverState {
  width: 100%;
  text-align: left;
  cursor: pointer;

  &.expanded {
    width: calc(100% + #{$spacing-md});
  }

  &:hover {
    background-color: var(--dt-hover-background-heart, $color-gray-100);
  }
}

.rowCell {
  min-height: $row-height;
  padding: 0 $spacing-md;
  display: flex;
  align-items: center;
  // These css properties are required for when the cells are anchor elements
  composes: anchorReset;

  .defaultSpacing & {
    padding: $spacing-sm $spacing-md;
  }

  .dataVariant & {
    min-height: $row-height-data-variant;
  }
}

.rowCellAlignCenter {
  justify-content: center;
  text-align: center;
}

.rowCellAlignEnd {
  justify-content: flex-end;
  text-align: right;
}

.headerRowCellIconAlignCenter,
.headerRowCellIconAlignEnd {
  //makes sure the label doesn't move on hover when not left aligned
  margin-right: -20px;
}
