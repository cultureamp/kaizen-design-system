@import "~@kaizen/design-tokens/sass/color-vars";
@import "~@kaizen/design-tokens/sass/border-vars";
@import "~@kaizen/design-tokens/sass/variable-identifiers";
@import "~@kaizen/component-library/styles/border";
@import "~@kaizen/deprecated-component-library-helpers/styles/color";
@import "~@kaizen/component-library/styles/layers";
@import "~@kaizen/deprecated-component-library-helpers/styles/layout";
@import "~@kaizen/component-library/styles/responsive";
@import "~@kaizen/deprecated-component-library-helpers/styles/type";
@import "~@kaizen/draft-button/KaizenDraft/Button/styles";

// Sync with PopoverModern.tsx
$arrow-width: 16px;
$arrow-height: 8px;

$large-width: 450px;

// Suggestion: with this implementation, the anchor point of the popover is at the base of the triangle. But,
// we would ideally want it at the tip of the triangle. Otherwise, when using the popover, the consumer needs to manually
// add something like a `margin-top: 8px` to get the popover properly positioned.
// I didn't update this, as I didn't want to introduce a breaking change.
@mixin arrow($background-color, $border-color) {
  &::before,
  &::after {
    content: "";
    position: absolute;
    border-left: ($arrow-width / 2) solid transparent;
    border-right: ($arrow-width / 2) solid transparent;
    top: 0;
    left: 0;
  }

  &::before {
    border-top: $arrow-height solid $border-color;
  }

  /* The white fill of the triangle */
  &::after {
    border-top: $arrow-height solid $background-color;
    margin-top: -2px;
    z-index: 1;
  }
}

.root {
  width: 220px;
  position: absolute;
  left: 50%;
  // also see the component file under getRootStyle, which will transform the element
}

%box {
  background: white;
  border: $kz-var-border-solid-border-width $kz-var-border-solid-border-style
    var($kz-var-id-color-ash, $kz-var-color-wisteria-200);
  filter: drop-shadow(0 0 7px rgba(0, 0, 0, 0.1));
  border-radius: $kz-var-border-solid-border-radius;
  color: $kz-var-color-wisteria-800;
  text-align: left;
}

.defaultBox {
  @extend %box;
}

.defaultArrow {
  @include arrow(white, var($kz-var-id-color-ash, $kz-var-color-wisteria-200));
}

$informative-box-border-color: var(
  $kz-var-id-color-cluny-300,
  $kz-var-color-cluny-200
);

.informativeBox {
  @extend %box;
  background: $kz-var-color-cluny-100;
  border-color: $informative-box-border-color;
}

.informativeArrow {
  @include arrow($kz-var-color-cluny-100, $informative-box-border-color);
}

$positive-box-border-color: var(
  $kz-var-id-color-seedling-300,
  $kz-var-color-seedling-200
);

.positiveBox {
  @extend %box;
  background: $kz-var-color-seedling-100;
  border-color: $positive-box-border-color;
}

.positiveArrow {
  @include arrow($kz-var-color-seedling-100, $positive-box-border-color);
}

$negative-box-border-color: var(
  $kz-var-id-color-coral-300,
  $kz-var-color-coral-200
);

.negativeBox {
  @extend %box;
  background: $kz-var-color-coral-100;
  border-color: $negative-box-border-color;
}

.negativeArrow {
  @include arrow($kz-var-color-coral-100, $negative-box-border-color);
}

.cautionaryBox {
  @extend %box;
  background: $kz-var-color-yuzu-100;
  border-color: $kz-var-color-yuzu-400;
}

.cautionaryArrow {
  @include arrow($kz-var-color-yuzu-100, $kz-var-color-yuzu-400);
}

.header {
  @include kz-typography-heading-6;
  @include ca-inherit-baseline;
  padding: ($ca-grid / 4) ($ca-grid / 2);
  margin-bottom: $ca-grid / 4;
  display: flex;
  align-items: center;
  white-space: nowrap;
}

.container {
  @include ca-inherit-baseline;
  @include kz-typography-paragraph-small;
  padding: ($ca-grid / 6) ($ca-grid / 2) ($ca-grid);
  white-space: pre-line;
}

.icon {
  display: inherit;
  margin-right: $ca-grid / 4;
}

.informativeIcon {
  color: $kz-var-color-cluny-500;
}

.positiveIcon {
  color: $kz-var-color-seedling-400;
}

.negativeIcon {
  color: $kz-var-color-coral-500;
}

.cautionaryIcon {
  color: $kz-var-color-yuzu-500;
}

.close {
  @include button-reset;
  margin-left: auto;
  display: inherit;
  color: rgba($kz-var-color-wisteria-800-rgb-params, 0.7);
}

.arrowWrapper {
  position: absolute;
  // Needed by popper, so it measures the size of the arrow correctly
  width: $arrow-width;
  height: $arrow-height;
}

.arrow {
  // Needed by popper, so it measures the size of the arrow correctly
  width: $arrow-width;
  height: $arrow-height;
}

/**
 * In the legacy popover, the "side" described the location of the arrow, and
 * we use css classes to determine the placement.
 * In the modern popover, the "side" describes the location of the popover
 * relative to the reference element, and we use data attributes to determine
 * the placement.
 * Hence, the confusion below.
 */
.arrowSideTop,
[data-popper-placement^="bottom"] .arrowWrapper {
  bottom: 100%;
  left: 50%;
  margin-top: -$arrow-height;

  .arrow {
    transform: rotate(180deg);
  }
}

.arrowSideBottom,
[data-popper-placement^="top"] .arrowWrapper {
  top: 100%;
  left: 50%;
}

// Legacy component only
.arrowPositionCenter {
  transform: translateX(-50%);
}

// Legacy component only
.arrowPositionStart {
  left: $ca-grid;
  right: auto;
}

// Legacy component only
.arrowPositionEnd {
  right: $ca-grid;
  left: auto;
}

.large {
  width: auto;
  max-width: $large-width;
}

.singleLine {
  text-overflow: ellipsis;
  /* white-space and overflow are required for text-overflow to do anything */
  white-space: nowrap;
  overflow: hidden;
}
