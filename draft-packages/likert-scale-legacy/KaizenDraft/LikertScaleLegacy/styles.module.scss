@import "~@kaizen/design-tokens/sass/border";
@import "~@kaizen/design-tokens/sass/color";
@import "~@kaizen/deprecated-component-library-helpers/styles/layout";

@mixin respond-to($media) {
  @if $media == print {
    @media only print {
      @content;
    }
  } @else if $media == iphone {
    @media only screen and (max-width: 767px) {
      @content;
    }
  } @else if $media == ipad {
    @media only screen and (max-width: 959px) {
      @content;
    }
  }
}

$block-height: 35px;
$desktop-rater-width: 220px;
$desktop-rater-height: 63px;

$start: #fd3;
$end: #f50;

$first: mix($start, $end, 100%);
$second: mix($start, $end, 75%);
$third: mix($start, $end, 50%);
$fourth: mix($start, $end, 25%);
$fifth: mix($start, $end, 0%);

@mixin pop {
  -webkit-animation: pop cubic-bezier(0, 0.94, 0.32, 1) 0.7s 1;
}

@mixin fill($height) {
  &:first-child .likertItemFill {
    border-top-left-radius: $height;
    border-bottom-left-radius: $height;

    [dir="rtl"] & {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      border-top-right-radius: $height;
      border-bottom-right-radius: $height;
    }

    &:after {
      border-top-left-radius: $height;
      border-bottom-left-radius: $height;

      [dir="rtl"] & {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        border-top-right-radius: $height;
        border-bottom-right-radius: $height;
      }
    }
  }

  &:last-child .likertItemFill {
    border-top-right-radius: $height;
    border-bottom-right-radius: $height;

    [dir="rtl"] & {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
      border-top-left-radius: $height;
      border-bottom-left-radius: $height;
    }

    &:after {
      border-top-right-radius: $height;
      border-bottom-right-radius: $height;

      [dir="rtl"] & {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-top-left-radius: $height;
        border-bottom-left-radius: $height;
      }
    }
  }
}

@keyframes pop {
  0% {
    opacity: 0.5;
    -webkit-transform: scale(1);
  }
  100% {
    opacity: 0;
    -webkit-transform: scale(1.78);
  }
}

.container {
  width: $desktop-rater-width;
  position: relative;
  box-sizing: border-box;

  @include respond-to(iphone) {
    width: 258px;
    position: static;
  }

  &.rated .likertItem.unselected .likertItemFill {
    background-color: $color-purple-100;
    border-color: $color-purple-100;
    transition: background 0.1s;
  }

  &.reversed.rated .likertItem.unselected .likertItemFill {
    background-color: transparent;
    border-color: rgba($color-white-rgb, 0.65);
  }
}

:global(.js-focus-visible) {
  $focus-ring-offset: 3px;

  .container {
    &:focus {
      outline: none;
    }

    &:global(.focus-visible)::after {
      $focus-ring-offset: calc((#{$border-focus-ring-border-width} * 2) + 1px);
      content: "";
      position: absolute;
      background: transparent;
      border-radius: $border-focus-ring-border-radius;
      border-width: $border-focus-ring-border-width;
      border-style: $border-focus-ring-border-style;
      border-color: $color-blue-500;
      top: calc(-1 * #{$focus-ring-offset});
      left: calc(-1 * #{$focus-ring-offset});
      right: calc(-1 * #{$focus-ring-offset});
      bottom: calc(-1 * #{$focus-ring-offset});
    }
  }

  .likertItem:focus {
    outline: none;
  }

  .reversed:not(.rated)
    :global([data-focus-visible-added]).likertItem:focus
    .likertItemFill {
    border-color: $color-white;
  }

  // React seems to be causing the .focus-visible class to only be added sometimes,
  // so we need to use [data-focus-visible-added] here instead.
  // See https://github.com/WICG/focus-visible#2-update-your-css
  :global([data-focus-visible-added]).likertItem::after {
    content: "";
    position: absolute;
    background: transparent;
    border-radius: $border-focus-ring-border-radius;
    border-width: $border-focus-ring-border-width;
    border-style: $border-focus-ring-border-style;
    border-color: $color-blue-500;
    top: calc(-1 * #{$focus-ring-offset});
    left: calc(-1 * #{$focus-ring-offset});
    right: calc(-1 * #{$focus-ring-offset});
    bottom: calc(-1 * #{$focus-ring-offset});
  }

  .reversed :global([data-focus-visible-added]).likertItem::after {
    border-color: $color-blue-300;
  }
}

.itemContainer {
  width: 100%;
  white-space: nowrap;
  display: inline-block;
  height: $block-height + 2px;
  font-size: 0;
}

.legend {
  margin-bottom: $ca-grid * 0.1;
  text-align: center;
  position: absolute;
  top: -$ca-grid;
  left: 0;
  right: 0;

  @include respond-to(iphone) {
    position: initial;
    top: 0;
  }
}

.likertItem {
  @include ca-margin($start: 1px);
  @include fill($block-height);
  font-size: 1px;
  line-height: 1;
  padding: 0;
  overflow-x: visible;
  display: inline-block;
  width: 20%; // 5 columns
  position: relative;

  &:first-child {
    margin: 0;
  }

  &.suggested,
  &.selected {
    .field1 {
      background-color: $first;
      border-color: $first;
      &:after {
        background-color: $first;
      }
    }
    .field2 {
      background-color: $second;
      border-color: $second;
      &:after {
        background-color: $second;
      }
    }
    .field3 {
      background-color: $third;
      border-color: $third;
      &:after {
        background-color: $third;
      }
    }
    .field4 {
      background-color: $fourth;
      border-color: $fourth;
      &:after {
        background-color: $fourth;
      }
    }
    .field5 {
      background-color: $fifth;
      border-color: $fifth;
      &:after {
        background-color: $fifth;
      }
    }
  }
}

.likertItemFill {
  transition: background 0.1s, border-color 0.1s;
  width: 90%;
  height: $block-height;
  border: 1px solid #d7d8d8;

  &:hover {
    transition: background 0s, border-color 0s;
  }
  &:after {
    content: " ";
    display: block;
    height: 100%;
    width: 100%;
    pointer-events: none;
  }

  &.pop:after {
    @include pop;
  }
}

.reversed .likertItemFill {
  border-width: 2px;
  border-color: rgba($color-white-rgb, 0.65);
  width: 85%;
}

@media only screen and (max-width: 767px) {
  $block-height: 48px;

  .container {
    min-width: 258px;
  }

  .itemContainer {
    height: $block-height + 2px;
  }

  .likertItem {
    @include fill($block-height);
  }

  .likertItemFill {
    height: $block-height;
  }
}

@media print {
  .legend {
    display: none;
  }

  .container {
    top: 1em;
    right: 2em;
    width: 150px;

    .likertItem {
      .likertItemFill {
        height: 25px;
        background: white;
        border: 1px solid #d7d8d8;
      }

      &:first-child,
      &:last-child {
        .likertItemFill {
          background: white;
          border-width: 2px;
        }
      }
    }
  }
}
