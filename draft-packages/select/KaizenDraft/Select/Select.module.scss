@import "~@kaizen/design-tokens/sass/typography";
@import "~@kaizen/design-tokens/sass/shadow";
@import "~@kaizen/design-tokens/sass/border";
@import "~@kaizen/design-tokens/sass/color";

// Should match the values for the Input component
$input-height: 48px;
$input-placeholder-opacity: 0.5;

$focus-border-color: $color-blue-500;

%focus-border {
  $focus-ring-offset: calc((#{$border-focus-ring-border-width} * -2) - 1px);
  content: "";
  position: absolute;
  background: transparent;
  border-radius: $border-focus-ring-border-radius;
  border-width: $border-focus-ring-border-width;
  border-style: $border-focus-ring-border-style;
  border-color: $focus-border-color;
  top: $focus-ring-offset;
  left: $focus-ring-offset;
  right: $focus-ring-offset;
  bottom: $focus-ring-offset;
}

@mixin base-font-style() {
  font-family: $typography-paragraph-body-font-family;
  font-weight: $typography-paragraph-body-font-weight;
  font-size: $typography-paragraph-body-font-size;
  line-height: $typography-paragraph-body-line-height;
  letter-spacing: $typography-paragraph-body-letter-spacing;
  color: $color-purple-800;
}

.specificityIncreaser {
  .multiValue {
    margin: 0.2375rem;
  }

  .dropdownIndicator {
    color: rgba($color-purple-800-rgb, 0.7);
    &:hover {
      color: rgba($color-purple-800-rgb, 0.7);
    }
  }

  .control {
    &.disabled {
      opacity: 0.3;
    }
    min-height: $input-height;
    border: $border-solid-border-width $border-solid-border-style
      $color-gray-500;
    border-radius: $border-solid-border-radius;

    &:hover {
      border-color: $color-gray-600;
      background-color: $color-gray-100;
      cursor: pointer;
    }

    &:focus-within {
      &::after {
        @extend %focus-border;
      }
    }
  }

  .valueContainer {
    font-family: $typography-paragraph-body-font-family;
    font-size: $typography-paragraph-body-font-size;
  }

  .loadingMessage {
    @include base-font-style();
  }

  .focusedControl {
    box-shadow: none;

    &:hover {
      box-shadow: none;
    }
  }

  .placeholder {
    @include base-font-style();
    opacity: $input-placeholder-opacity;
  }

  .menu {
    // Temporary 6px until we redesign this component with Inter
    border: 6px $border-solid-border-style transparent;
    border-radius: $border-solid-border-radius;
    box-shadow: $shadow-large-box-shadow;

    // built-in class of React Select that is not easily styled any other way in CSS
    // (This is the "MenuList" div that wraps all the options)
    > div {
      padding-top: 0;
      padding-bottom: 0;
    }
  }

  .option {
    @include base-font-style();
    cursor: pointer;
    border-radius: $border-focus-ring-border-radius;
    border-width: $border-focus-ring-border-width;
    border-style: $border-focus-ring-border-style;
    border-color: transparent;
  }

  .focusedOption {
    background-color: $color-blue-100;
    color: $color-blue-500;
    border-color: $focus-border-color;

    &:active {
      background-color: $color-blue-100;
    }
  }

  .selectedOption {
    background-color: $color-blue-100;
  }

  .disabledOption {
    cursor: not-allowed;
    opacity: 0.3;
  }

  .noOptionsMessage {
    @include base-font-style();
  }

  .singleValue {
    @include base-font-style();
  }

  .input {
    color: $color-purple-800;
    padding: 0 20px 0 0;
    margin: 0;
  }

  &.secondarySmall {
    .input {
      font-family: $typography-paragraph-extra-small-font-family;
      font-weight: $typography-paragraph-extra-small-font-weight;
      font-size: $typography-paragraph-extra-small-font-size;
      line-height: $typography-paragraph-extra-small-line-height;
      letter-spacing: $typography-paragraph-extra-small-letter-spacing;
    }
  }

  &.reversed {
    .singleValue {
      color: $color-white;
    }
    .singleValueOverrides {
      color: $color-white;
    }
    .input {
      color: $color-white;
    }
  }

  &.error {
    .control {
      border: $border-solid-border-width $border-solid-border-style
        $color-red-500;
    }
  }

  &.secondary,
  &.secondarySmall {
    &.default {
      .control {
        background: transparent;
        border: $border-borderless-border-width $border-borderless-border-style
          $border-borderless-border-color;
        border-radius: $border-borderless-border-radius;

        .singleValue {
          color: $color-blue-500;
        }

        &:hover {
          background: $color-blue-100;
        }

        &.disabled {
          opacity: 0.3;
        }

        &.focusedControl {
          background: $color-blue-100;

          &::after {
            @extend %focus-border;
          }
        }
      }

      .dropdownIndicator {
        color: $color-blue-500;
      }
    }

    &.reversed {
      .control {
        background: rgba($color-white-rgb, 0.1);
        color: $color-white;
        border: $border-borderless-border-width $border-borderless-border-style
          $border-borderless-border-color;
        border-radius: $border-borderless-border-radius;

        &:hover {
          background: rgba($color-white-rgb, 0.2);
        }

        &.disabled {
          opacity: 0.3;
        }
      }

      .dropdownIndicator {
        color: $color-white;
      }

      $secondary-reversed-focus-color: $color-blue-300;

      .focusedControl {
        border-color: $secondary-reversed-focus-color;

        &:hover {
          border-color: $secondary-reversed-focus-color;
        }
      }

      .placeholder {
        color: $color-white;
      }
    }
  }

  &.secondarySmall.secondarySmall {
    $secondary-small-select-height: 24px;

    &.reversed {
      .control {
        background: transparent;
        border: 0;

        &:hover {
          background: transparent;
        }
      }
    }

    .control {
      min-height: 0;
      height: auto;

      > div {
        // see note on > div within .notFullWidth below for explanation
        height: $secondary-small-select-height;
        padding-left: 0;
        padding-right: 0;
      }

      .valueContainer {
        height: $secondary-small-select-height;
      }

      .singleValue {
        font-family: $typography-paragraph-extra-small-font-family;
        font-weight: $typography-paragraph-extra-small-font-weight;
        font-size: $typography-paragraph-extra-small-font-size;
        line-height: $typography-paragraph-extra-small-line-height;
        letter-spacing: $typography-paragraph-extra-small-letter-spacing;
      }

      .singleValueOverrides {
        margin-left: 0;
        margin-right: 0;
      }
    }

    .dropdownIndicator {
      padding-top: 0;
      padding-bottom: 0;
      transform: translateY(1px);

      // Usually reaching into the Icon component like this is a no-no, but
      // in this case we don't have access to the component in the middle which is
      // part of react-select. I thought this would be better than hacking the
      // structure of that component to allow one custom prop to trickle through.
      > svg {
        height: 14px;
        width: 14px;
      }
    }
  }

  &.notFullWidth {
    .control {
      display: inline-block;
      // ideally this would be inline-flex, but that causes problems in IE11
      max-width: 100%;

      > div {
        // If this CSS is removed, then the control becomes too tall when
        // it ellipsizes. It's strange, as the parent element is
        // display: inline-block, so you wouldn't expect it to have any affect,
        // but it works and was honesty a fluke from some unintentionally
        // leftover code when refactoring to support IE11 :shrug
        // I don't like the descendent selector, but there doesn't seem to be
        // a way to customise this element in react-select.
        height: 44px; // fixed height required for vertical centering, due to IE11 hack
        flex-wrap: nowrap;
        display: flex;
      }
    }

    .indicatorsContainer {
      position: absolute; // absolute positioning is required due to IE11 and not
      // being able to use inline-flex
      right: 0;
      top: 0;
    }

    .singleValueOverrides {
      overflow: hidden;
      position: static;
      white-space: nowrap;
      top: 0px;
      transform: none;
      max-width: 100%;
      padding-right: 14px;
    }
    .placeholderOverrides {
      padding-right: 14px;
    }
    .singleValue {
      max-width: 100%;
    }
  }
}
